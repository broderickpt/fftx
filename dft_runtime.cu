#include <cuda.h>
#include <cuda_runtime.h>
#include <iostream>

/*
 * This code was generated by Spiral 8.3.0, www.spiral.net
 */

__device__ double  *P1;
 __device__ double D1[128] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 0.92387953251128674, (-0.38268343236508978), 
      0.99518472667219693, (-0.098017140329560604), 0.88192126434835505, (-0.47139673682599764), 
      0.98078528040323043, (-0.19509032201612825), 0.83146961230254524, (-0.55557023301960218), 
      0.95694033573220882, (-0.29028467725446233), 0.77301045336273699, (-0.63439328416364549), 
      1.0, 0.0, 0.70710678118654757, (-0.70710678118654757), 
      0.98078528040323043, (-0.19509032201612825), 0.55557023301960218, (-0.83146961230254524), 
      0.92387953251128674, (-0.38268343236508978), 0.38268343236508978, (-0.92387953251128674), 
      0.83146961230254524, (-0.55557023301960218), 0.19509032201612825, (-0.98078528040323043), 
      1.0, 0.0, 0.38268343236508978, (-0.92387953251128674), 
      0.95694033573220882, (-0.29028467725446233), 0.098017140329560604, (-0.99518472667219693), 
      0.83146961230254524, (-0.55557023301960218), (-0.19509032201612825), (-0.98078528040323043), 
      0.63439328416364549, (-0.77301045336273699), (-0.47139673682599764), (-0.88192126434835505), 
      1.0, 0.0, 0.0, (-1.0), 
      0.92387953251128674, (-0.38268343236508978), (-0.38268343236508978), (-0.92387953251128674), 
      0.70710678118654757, (-0.70710678118654757), (-0.70710678118654757), (-0.70710678118654757), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), (-0.38268343236508978), 
      1.0, 0.0, (-0.38268343236508978), (-0.92387953251128674), 
      0.88192126434835505, (-0.47139673682599764), (-0.77301045336273699), (-0.63439328416364549), 
      0.55557023301960218, (-0.83146961230254524), (-0.98078528040323043), (-0.19509032201612825), 
      0.098017140329560604, (-0.99518472667219693), (-0.95694033573220882), 0.29028467725446233, 
      1.0, 0.0, (-0.70710678118654757), (-0.70710678118654757), 
      0.83146961230254524, (-0.55557023301960218), (-0.98078528040323043), (-0.19509032201612825), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), 0.38268343236508978, 
      (-0.19509032201612825), (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524, 
      1.0, 0.0, (-0.92387953251128674), (-0.38268343236508978), 
      0.77301045336273699, (-0.63439328416364549), (-0.95694033573220882), 0.29028467725446233, 
      0.19509032201612825, (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524, 
      (-0.47139673682599764), (-0.88192126434835505), 0.098017140329560604, 0.99518472667219693};


__global__ void ker_grid_dft2d_cont0(double  *X) {
    double a252, a253, a254, a255, s61, s62, s63, s64, 
            s65, s66, s67, s68, s69, s70, s71, s72, 
            s73, s74, s75, s76, s77, s78, s79, s80, 
            t173, t174, t175, t176, t177, t178, t179, t180, 
            t181, t182, t183, t184, t185, t186, t187, t188, 
            t189, t190, t191, t192, t193, t194, t195, t196, 
            t197, t198, t199, t200;
    int a250, a251, a256, b65;
    a250 = (threadIdx.x % 8);
    b65 = ((256*blockIdx.x) + (128*(threadIdx.x / 8)));
    a251 = (b65 + (2*a250));
    s61 = X[a251];
    s62 = X[(a251 + 1)];
    s63 = X[(a251 + 64)];
    s64 = X[(a251 + 65)];
    t173 = (s61 + s63);
    t174 = (s62 + s64);
    t175 = (s61 - s63);
    t176 = (s62 - s64);
    s65 = X[(a251 + 16)];
    s66 = X[(a251 + 17)];
    s67 = X[(a251 + 80)];
    s68 = X[(a251 + 81)];
    t177 = (s65 + s67);
    t178 = (s66 + s68);
    a252 = (0.70710678118654757*(s65 - s67));
    a253 = (0.70710678118654757*(s66 - s68));
    s69 = (a252 + a253);
    s70 = (a253 - a252);
    s71 = X[(a251 + 32)];
    s72 = X[(a251 + 33)];
    s73 = X[(a251 + 96)];
    s74 = X[(a251 + 97)];
    t179 = (s71 + s73);
    t180 = (s72 + s74);
    t181 = (s71 - s73);
    t182 = (s72 - s74);
    s75 = X[(a251 + 48)];
    s76 = X[(a251 + 49)];
    s77 = X[(a251 + 112)];
    s78 = X[(a251 + 113)];
    t183 = (s75 + s77);
    t184 = (s76 + s78);
    a254 = (0.70710678118654757*(s76 - s78));
    a255 = (0.70710678118654757*(s75 - s77));
    s79 = (a254 - a255);
    s80 = (a255 + a254);
    t185 = (t173 + t179);
    t186 = (t174 + t180);
    t187 = (t173 - t179);
    t188 = (t174 - t180);
    t189 = (t177 + t183);
    t190 = (t178 + t184);
    t191 = (t177 - t183);
    t192 = (t178 - t184);
    a256 = (b65 + (16*a250));
    P1[a256] = (t185 + t189);
    P1[(a256 + 1)] = (t186 + t190);
    P1[(a256 + 8)] = (t185 - t189);
    P1[(a256 + 9)] = (t186 - t190);
    P1[(a256 + 4)] = (t187 + t192);
    P1[(a256 + 5)] = (t188 - t191);
    P1[(a256 + 12)] = (t187 - t192);
    P1[(a256 + 13)] = (t188 + t191);
    t193 = (t175 + t182);
    t194 = (t176 - t181);
    t195 = (t175 - t182);
    t196 = (t176 + t181);
    t197 = (s69 + s79);
    t198 = (s70 - s80);
    t199 = (s69 - s79);
    t200 = (s70 + s80);
    P1[(a256 + 2)] = (t193 + t197);
    P1[(a256 + 3)] = (t194 + t198);
    P1[(a256 + 10)] = (t193 - t197);
    P1[(a256 + 11)] = (t194 - t198);
    P1[(a256 + 6)] = (t195 + t200);
    P1[(a256 + 7)] = (t196 - t199);
    P1[(a256 + 14)] = (t195 - t200);
    P1[(a256 + 15)] = (t196 + t199);
}

__global__ void ker_grid_dft2d_cont1(double  *Y) {
    double a749, a750, a751, a752, a757, a758, a759, a760, 
            a761, a762, a767, a768, a769, a770, a775, a776, 
            a777, a778, a779, a780, s189, s190, s191, s192, 
            s193, s194, s195, s196, s197, s198, s199, s200, 
            s201, s202, s203, s204, s205, s206, s207, s208, 
            s209, s210, s211, s212, s213, s214, s215, s216, 
            s217, s218, s219, s220, s221, s222, s223, s224, 
            t325, t326, t327, t328, t329, t330, t331, t332, 
            t333, t334, t335, t336, t337, t338, t339, t340, 
            t341, t342, t343, t344, t345, t346, t347, t348, 
            t349, t350, t351, t352;
    int a743, a744, a745, a746, a747, a748, a753, a754, 
            a755, a756, a763, a764, a765, a766, a771, a772, 
            a773, a774;
    a743 = (threadIdx.x % 8);
    a744 = ((256*blockIdx.x) + (128*(threadIdx.x / 8)) + (2*a743));
    s189 = P1[a744];
    a745 = (a744 + 1);
    s190 = P1[a745];
    a746 = (a744 + 64);
    s191 = P1[a746];
    a747 = (a744 + 65);
    s192 = P1[a747];
    a748 = (16*a743);
    a749 = D1[a748];
    a750 = D1[(a748 + 1)];
    s193 = ((a749*s189) - (a750*s190));
    s194 = ((a750*s189) + (a749*s190));
    a751 = D1[(a748 + 2)];
    a752 = D1[(a748 + 3)];
    s195 = ((a751*s191) - (a752*s192));
    s196 = ((a752*s191) + (a751*s192));
    t325 = (s193 + s195);
    t326 = (s194 + s196);
    t327 = (s193 - s195);
    t328 = (s194 - s196);
    a753 = (a744 + 16);
    s197 = P1[a753];
    a754 = (a744 + 17);
    s198 = P1[a754];
    a755 = (a744 + 80);
    s199 = P1[a755];
    a756 = (a744 + 81);
    s200 = P1[a756];
    a757 = D1[(a748 + 4)];
    a758 = D1[(5 + a748)];
    s201 = ((a757*s197) - (a758*s198));
    s202 = ((a758*s197) + (a757*s198));
    a759 = D1[(6 + a748)];
    a760 = D1[(7 + a748)];
    s203 = ((a759*s199) - (a760*s200));
    s204 = ((a760*s199) + (a759*s200));
    t329 = (s201 + s203);
    t330 = (s202 + s204);
    a761 = (0.70710678118654757*(s201 - s203));
    a762 = (0.70710678118654757*(s202 - s204));
    s205 = (a761 + a762);
    s206 = (a762 - a761);
    a763 = (a744 + 32);
    s207 = P1[a763];
    a764 = (a744 + 33);
    s208 = P1[a764];
    a765 = (a744 + 96);
    s209 = P1[a765];
    a766 = (a744 + 97);
    s210 = P1[a766];
    a767 = D1[(a748 + 8)];
    a768 = D1[(9 + a748)];
    s211 = ((a767*s207) - (a768*s208));
    s212 = ((a768*s207) + (a767*s208));
    a769 = D1[(10 + a748)];
    a770 = D1[(11 + a748)];
    s213 = ((a769*s209) - (a770*s210));
    s214 = ((a770*s209) + (a769*s210));
    t331 = (s211 + s213);
    t332 = (s212 + s214);
    t333 = (s211 - s213);
    t334 = (s212 - s214);
    a771 = (a744 + 48);
    s215 = P1[a771];
    a772 = (a744 + 49);
    s216 = P1[a772];
    a773 = (a744 + 112);
    s217 = P1[a773];
    a774 = (a744 + 113);
    s218 = P1[a774];
    a775 = D1[(a748 + 12)];
    a776 = D1[(13 + a748)];
    s219 = ((a775*s215) - (a776*s216));
    s220 = ((a776*s215) + (a775*s216));
    a777 = D1[(14 + a748)];
    a778 = D1[(15 + a748)];
    s221 = ((a777*s217) - (a778*s218));
    s222 = ((a778*s217) + (a777*s218));
    t335 = (s219 + s221);
    t336 = (s220 + s222);
    a779 = (0.70710678118654757*(s220 - s222));
    a780 = (0.70710678118654757*(s219 - s221));
    s223 = (a779 - a780);
    s224 = (a780 + a779);
    t337 = (t325 + t331);
    t338 = (t326 + t332);
    t339 = (t325 - t331);
    t340 = (t326 - t332);
    t341 = (t329 + t335);
    t342 = (t330 + t336);
    t343 = (t329 - t335);
    t344 = (t330 - t336);
    Y[a744] = (t337 + t341);
    Y[a745] = (t338 + t342);
    Y[a746] = (t337 - t341);
    Y[a747] = (t338 - t342);
    Y[a763] = (t339 + t344);
    Y[a764] = (t340 - t343);
    Y[a765] = (t339 - t344);
    Y[a766] = (t340 + t343);
    t345 = (t327 + t334);
    t346 = (t328 - t333);
    t347 = (t327 - t334);
    t348 = (t328 + t333);
    t349 = (s205 + s223);
    t350 = (s206 - s224);
    t351 = (s205 - s223);
    t352 = (s206 + s224);
    Y[a753] = (t345 + t349);
    Y[a754] = (t346 + t350);
    Y[a755] = (t345 - t349);
    Y[a756] = (t346 - t350);
    Y[a771] = (t347 + t352);
    Y[a772] = (t348 - t351);
    Y[a773] = (t347 - t352);
    Y[a774] = (t348 + t351);
}

void grid_dft2d_cont(double  *Y, double  *X) {
    dim3 b129(16, 1, 1), b130(16, 1, 1), g1(2, 1, 1), g2(2, 1, 1);
    ker_grid_dft2d_cont0<<<g1, b129>>>(X);
    ker_grid_dft2d_cont1<<<g2, b130>>>(Y);
}

void destroy_grid_dft2d_cont() {
    double  *hp1;
    cudaMemcpyFromSymbol(&(hp1), P1, sizeof(double  *));
    cudaFree(hp1);
}

void init_grid_dft2d_cont() {
    double  *hp1;
    cudaDeviceSetLimit(cudaLimitMallocHeapSize, 1073741824);
    cudaFuncSetCacheConfig(ker_grid_dft2d_cont0, cudaFuncCachePreferL1);
    cudaFuncSetCacheConfig(ker_grid_dft2d_cont1, cudaFuncCachePreferL1);
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*512));
    cudaMemcpyToSymbol(P1, &(hp1), sizeof(double  *));
}

int main() {
    double * X, *Y;

    int size = 64;
    
    cudaMallocManaged(&X, size*sizeof(double));
    cudaMallocManaged(&Y, size*sizeof(double));

    for(int i = 0; i < size; i++) {
        X[i] = i*10;
        Y[i] = 0;
        std::cout << X[i] << "\t" << Y[i] << "\n";
    }
    std::cout << "init code \n";
    init_grid_dft2d_cont();
    cudaDeviceSynchronize();
    std::cout << "run code \n";
    grid_dft2d_cont(X,Y);
    cudaDeviceSynchronize();
    std::cout << "finish running \n";
    for(int i = 0; i < size; i++) {
        std::cout << Y[i] << "\n";
    }
    std::cout << "\n";
    destroy_grid_dft2d_cont();
     cudaDeviceSynchronize();
    return 0;
}